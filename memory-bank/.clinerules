# Cline Rules

## プロジェクトパターン

### コーディング規約
1. TypeScript
   - 厳格な型定義を使用
   - インターフェースを優先的に使用
   - any型の使用を避ける

2. コンポーネント
   - 機能ごとにディレクトリを分割
   - カスタムフックでロジックを分離
   - Props型を明示的に定義

3. 命名規則
   - コンポーネント: PascalCase
   - フック: camelCase (use プレフィックス)
   - 型定義: PascalCase (後置 Type/Props)

### ファイル構造
1. src/app/
   - ページコンポーネント
   - APIルート
   - グローバルスタイル

2. src/components/
   - 再利用可能なコンポーネント
   - モーダル
   - フォーム

3. src/hooks/
   - カスタムフック
   - ロジック分離
   - 状態管理

### エラー処理
1. フロントエンド
   - try-catch でのエラーハンドリング
   - エラーバウンダリの使用
   - ユーザーフレンドリーなエラーメッセージ

2. バックエンド
   - エラーレスポンスの標準化
   - ログ出力の統一
   - エラーコードの体系化

## 開発フロー

### コミット規約
1. メッセージフォーマット
   - feat: 新機能
   - fix: バグ修正
   - refactor: リファクタリング
   - docs: ドキュメント

2. ブランチ戦略
   - feature/: 機能開発
   - bugfix/: バグ修正
   - hotfix/: 緊急修正

### レビュー基準
1. コード品質
   - TypeScript の型安全性
   - パフォーマンスへの影響
   - テストの網羅性

2. アーキテクチャ
   - コンポーネントの責務
   - 状態管理の適切性
   - エラー処理の妥当性

## 学習した知見

### パフォーマンス最適化
1. メッセージング
   - WebSocket接続の再利用
   - メッセージのバッチ処理
   - キャッシュの活用

2. レンダリング
   - 不要な再レンダリングの防止
   - メモ化の適切な使用
   - 仮想スクロールの実装

### エラー対策
1. WebSocket
   - 接続の自動再試行
   - ハートビートの実装
   - フォールバック機構

2. データ永続化
   - Redis クラスタの冗長化
   - バックアップの自動化
   - 整合性チェック

## ユーザー体験の知見

### UI/UX パターン
1. メッセージ表示
   - グループ化による可読性向上
   - タイムスタンプの適切な表示
   - 未読表示の工夫

2. フォーム操作
   - リアルタイムバリデーション
   - エラーメッセージの即時表示
   - 送信中の UI フィードバック

### アクセシビリティ
1. キーボード操作
   - ショートカットキーの実装
   - フォーカス管理
   - タブ順序の最適化

2. スクリーンリーダー
   - ARIA ラベルの適切な使用
   - 意味のある見出し構造
   - 動的コンテンツの通知
